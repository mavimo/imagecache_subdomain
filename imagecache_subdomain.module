<?php // $Id$
/**
 * Module:      imagecache_subdomain
 * Date:        2010-01-24  12:35
 * Author:      Marco Vito Moscaritolo (aka mavimo)
 *
 * Description:
 *   Manage subdomain generation and configurattion for imagecache module
 *
 * License:
 *
 *   Copyright (C) 2010  Marco Vito Moscaritolo (aka mavimo)
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.pro See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */

/**
 * Implementation of hook_menu().
 */
// TODO: move configuration page into imagecache_subdomain.pages.inc
function imagecache_subdomain_menu() {
  $items = array();

  $items['admin/build/imagecache/subdomain'] = array(
    'title'            => 'Subdomain',
    'description'      => 'Setup for images subdomain',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('imagecache_subdomain_config_form'),
    'access arguments' => array('administer imagecache'),
    'type'             => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
// TODO: move theming function into imagecache_subdomain.themes.inc
function imagecache_subdomain_theme($existing, $type, $theme, $path) {
   return array(
    'imagecache_subdomain_config' => array(
      'arguments'     => array('form' => NULL),
    ),
  );
}

/**
 * Generate form to setup subdomain for images.
 *
 * @return array
 *   Form for configure subdomain for images.
 */
function imagecache_subdomain_config_form() {
  $form['subdomain_enable'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Enable'),
    '#description'   => t('Enable subdomain for images generated by imagecache'),
    '#weight'        => 0,
    '#default_value' => variable_get('imagecache_subdomain_enable', FALSE),
  );

  $subdomain_config = variable_get('imagecache_subdomain_config', array());

  for ($i = 0; $i < variable_get('imagecache_subdomain_number', 3); $i++) {
    $form['enable_' . $i] = array(
      '#type'          => 'checkbox',
      '#default_value' => isset($subdomain_config[$i]['enable']) ? $subdomain_config[$i]['enable'] : FALSE,
    );
    $form['uri_' . $i] = array(
      '#type'          => 'textfield',
      '#default_value' => isset($subdomain_config[$i]['uri']) ? $subdomain_config[$i]['uri'] : '',
    );
  }

  $form['submit'] = array(
    '#type'          => 'submit',
    '#value'         => t('Submit'),
  );

  $form['#theme'] = 'imagecache_subdomain_config';

  return $form;
}

/**
 * Themize form to setup subdomain.
 *
 * param array $form
 *   Form to theme
 * return string
 *   Themed form
 */
function theme_imagecache_subdomain_config($form) {
  $output  = drupal_render($form['subdomain_enable']);

  $header = array(t('Enable'), t('Subdomain'));
  $rows   = array();

  for ($i = 0; $i < variable_set('imagecache_subdomain_number', 3); $i++) {
    $rows[] = array(
      drupal_render($form['enable_' . $i]),
      drupal_render($form['uri_'    . $i]),
    );
  }

  $output .= theme('table', $header, $rows);
  $output .= drupal_render($form);
  return $output;
}

/**
 * Validate data from configuration form.
 */
function imagecache_subdomain_config_form_validate($form, &$form_state) {
  if ($form_state['values']['subdomain_enable']) {
    $num_subdomain = 0;

    for ($i = 0; $i < variable_get('imagecache_subdomain_number', 3); $i++) {
      // Validate URI for subdomain
      if ($form_state['values']['enable_' . $i]) {
        $uri = $form_state['values']['uri_'    . $i];
        if (!preg_match("/^http(s)?:\/\/([a-z0-9][-.a-z0-9]+)((\.[a-z]{2,4}))$/", $uri)) {
          form_set_error('uri_'    . $i, t("Is not valid URI, please remember don't tralling slash."));
        }
      }

      // Cound number of active subdomain
      if ($form_state['values']['enable_' . $i]) {
        $num_subdomain++;
      }
    }

    // Get error if no subdomain added
    if ($num_subdomain == 0) {
      form_set_error('enable_0', t('If you enable subdomain you must insert subdomain URI.'));
    }
  }
}

/**
 * Save data from configuration form.
 */
function imagecache_subdomain_config_form_submit($form, &$form_state) {
  // Set if activate subdomain management
  variable_set('imagecache_subdomain_enable', $form_state['values']['subdomain_enable']);

  // Setup single subdomain
  $config = array();

  for ($i = 0; $i < variable_get('imagecache_subdomain_number', 3); $i++) {
    if ($form_state['values']['enable_' . $i]) {
      $config[] = array(
        'enable' => $form_state['values']['enable_' . $i],
        'uri'    => $form_state['values']['uri_'    . $i],
      );
    }
  }

  variable_set('imagecache_subdomain_config', $config);
}


/** Return domain to add to image path.
 *
 * Generate domain to add to image to generate complete URL.
 * This function use first letter of name to redirect the same image into
 * the same domain everytime.
 *
 * @param $file_name
 *   Path and name of image.
 *
 * @return
 *   Domain do add into image absolute path.
 */
function _imagecache_subdomain_get($file_name = NULL) {
  // Return empty if subdomain is not enabled
  if (!variable_get('imagecache_subdomain_enable_global', FALSE) || is_null($file_name)) {
    return $GLOBALS['base_url'];
  }

  // Extract config
  $config = variable_get('imagecache_subdomain_config', array());

  // Count number of subdomain
  $num_subdomain = count($config);

  // Extract first char of filename
  // TODO: use regexp to extract only alphanumeric char
  $first_char = substr(basename($file_name), 0, 1);

  // Define list of possible first char value and generate array
  // TODO: it's possible improve performance using a defined array (no generation to runtime)
  $char_list = 'aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ0123456789-_.+';
  $char_key  = array_flip(str_split($char_list));

  // Find subdomain to use
  $subdomain = floor(($num_subdomain + 1) * $char_key[$first_char] / strlen($char_list));

  // Return correct subdomain
  return $config[$subdomain]['uri'];
}

/**
 * Create and image tag for an imagecache derivative
 *
 * @param $presetname
 *   String with the name of the preset used to generate the derivative image.
 * @param $path
 *   String path to the original image you wish to create a derivative image
 *   tag for.
 * @param $alt
 *   Optional string with alternate text for the img element.
 * @param $title
 *   Optional string with title for the img element.
 * @param $attributes
 *   Optional drupal_attributes() array. If $attributes is an array then the
 *   default imagecache classes will not be set automatically, you must do this
 *   manually.
 * @param $getsize
 *   If set to TRUE, the image's dimension are fetched and added as width/height
 *   attributes.
 * @return
 *   HTML img element string.
 */
function phptemplate_imagecache($presetname, $path, $alt = '', $title = '', $attributes = NULL, $getsize = TRUE) {
  // Check is_null() so people can intentionally pass an empty array of
  // to override the defaults completely.
  if (is_null($attributes)) {
    $attributes = array('class' => 'imagecache imagecache-'. $presetname);
  }
  if ($getsize && ($image = image_get_info(imagecache_create_path($presetname, $path)))) {
    $attributes['width'] = $image['width'];
    $attributes['height'] = $image['height'];
  }

  $attributes = drupal_attributes($attributes);
  $imagecache_url = imagecache_subdomain_create_url($presetname, $path);
  return '<img src="'. $imagecache_url .'" alt="'. check_plain($alt) .'" title="'. check_plain($title) .'" '. $attributes .' />';
}

/**
 * Return a URL that points to the location of a derivative of the
 * original image transformed with the given preset.
 *
 * Special care is taken to make this work with the possible combinations of
 * Clean URLs and public/private downloads. For example, when Clean URLs are not
 * available an URL withhttp://www.test.d6/sites/localhost/files/imagecache/test/Macchinine%20voto.png query should be returned, like
 * http://example.com/?q=files/imagecache/foo.jpg, so that imagecache is able
 * intercept the request for this file.
 *
 * This code is very similar to the Drupal core function file_create_url(), but
 * handles the case of Clean URLs and public downloads differently however.
 *
 * @param $presetname
 * @param $filepath
 *   String specifying thttp://www.test.d6/sites/localhost/files/imagecache/test/Macchinine%20voto.pnghe path to the image file.
 * @param $bypass_browser_cache
 *   A Boolean indicating that the URL for the image should be distinct so that
 *   the visitors browser will not be able to use a previously cached version.
 *   This is
 */
function imagecache_subdomain_create_url($presetname, $filepath, $bypass_browser_cache = FALSE) {
  $path = _imagecache_strip_file_directory($filepath);
  if (module_exists('transliteration')) {
    $path = transliteration_get($path);
  }

  $args = array('absolute' => TRUE, 'query' => empty($bypass_browser_cache) ? NULL : time());
  switch (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC)) {
    case FILE_DOWNLOADS_PUBLIC:
      return url(_imagecache_subdomain_get($filepath) . '/' . file_directory_path() .'/imagecache/'. $presetname .'/'. $path, $args);
    case FILE_DOWNLOADS_PRIVATE:
      return url('system/files/imagecache/'. $presetname .'/'. $path, $args);
  }
}
